import os
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, 
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from openai import OpenAI
from dotenv import load_dotenv
import asyncio
import time

# –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
def create_env_file():
    env_content = '''TELEGRAM_TOKEN=7844872007:AAFcTUHB6bk1NDnNw-XTnl4TpGxuWAsREYc
OPENAI_API_KEY=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'''
    
    with open('.env', 'w', encoding='utf-8') as f:
        f.write(env_content)

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª .env –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
create_env_file()
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
client = OpenAI(api_key=OPENAI_API_KEY)
ASSISTANT_ID = "asst_mlm40BuRGpCTWjoi15UfGFMp"

# –¢–µ–∫—Å—Ç—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
WELCOME_TEXT_RU = """–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç Aidar. –Ø –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ç–æ—Ä –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, —É–∑–Ω–∞—Ç—å –æ –±—É–¥—É—â–∏—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ, –ñ–î –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–µ.

–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?

–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º ‚Äî –æ—Ç–≤–µ—á—É –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É!"""

WELCOME_TEXT_KZ = """–°”ô–ª–µ–º! –ú–µ–Ω—ñ“£ –∞—Ç—ã–º ‚Äì –ê–π–¥–∞—Ä.
–ú–µ–Ω 10 –∂—ã–ª–¥—ã“õ —Ç”ô–∂—ñ—Ä–∏–±–µ—Å—ñ –±–∞—Ä –∫”ô—Å—ñ–±–∏ –±–∞“ì–¥–∞—Ä –º–∞–º–∞–Ω—ã –∂”ô–Ω–µ –∫–∞—Ä—å–µ—Ä–∞–ª—ã“õ –∫–µ“£–µ—Å—à—ñ–º—ñ–Ω.

–°—ñ–∑–≥–µ –º–∞–º–∞–Ω–¥—ã“õ —Ç–∞“£–¥–∞—É“ì–∞, –±–æ–ª–∞—à–∞“õ—Ç–∞“ì—ã —Ç—Ä–µ–Ω–¥—Ç–µ—Ä–¥—ñ —Ç“Ø—Å—ñ–Ω—É–≥–µ –∂”ô–Ω–µ –∫”©–ª—ñ–∫, —Ç–µ–º—ñ—Ä–∂–æ–ª –º–µ–Ω –ª–æ–≥–∏—Å—Ç–∏–∫–∞ —Å–∞–ª–∞–ª–∞—Ä—ã–Ω–¥–∞ “õ–∞–Ω–¥–∞–π –¥–∞“ì–¥—ã–ª–∞—Ä “õ–∞–∂–µ—Ç –µ–∫–µ–Ω—ñ–Ω –∞–Ω—ã“õ—Ç–∞—É“ì–∞ –∫”©–º–µ–∫—Ç–µ—Å–µ–º—ñ–Ω.

–°—ñ–∑–≥–µ “õ–∞–ª–∞–π –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–Ω?

–°“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑–¥—ã “õ–∞–∑–∞“õ –Ω–µ–º–µ—Å–µ –æ—Ä—ã—Å —Ç—ñ–ª—ñ–Ω–¥–µ “õ–æ–π—ã“£—ã–∑ ‚Äì “õ—ã—Å“õ–∞ ”ô—Ä—ñ –Ω–∞“õ—Ç—ã –∂–∞—É–∞–ø –±–µ—Ä–µ–º—ñ–Ω!"""

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_language_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton(text="üá∞üáø “ö–∞–∑–∞“õ—à–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

def get_main_menu_keyboard(lang='ru'):
    if lang == 'ru':
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", url="http://89.35.124.179/")],
            [InlineKeyboardButton(text="üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consultation")]
        ])
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –¢–µ—Å—Ç —Ç–∞–ø—Å—ã—Ä—É", url="http://89.35.124.179/")],
            [InlineKeyboardButton(text="üí¨ –ö–µ“£–µ—Å –∞–ª—É", callback_data="consultation")]
        ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(CommandStart())
async def send_welcome(message: Message):
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=get_language_keyboard()
    )

@dp.message(lambda message: message.text in ["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∞üáø “ö–∞–∑–∞“õ—à–∞"])
async def handle_language_choice(message: Message):
    lang = 'ru' if message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π" else 'kz'
    welcome_text = WELCOME_TEXT_RU if lang == 'ru' else WELCOME_TEXT_KZ
    await message.reply(
        welcome_text,
        reply_markup=get_main_menu_keyboard(lang)
    )

@dp.callback_query(lambda c: c.data == "consultation")
async def process_consultation(callback_query: types.CallbackQuery):
    await callback_query.answer()
    lang = 'ru'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
    if lang == 'ru':
        await callback_query.message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    else:
        await callback_query.message.reply("–°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã —Å–∏–ø–∞—Ç—Ç–∞“£—ã–∑:")

async def get_assistant_response(message_text: str) -> str:
    try:
        thread = client.beta.threads.create()
        client.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=message_text
        )

        run = client.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=ASSISTANT_ID
        )

        while True:
            run_status = client.beta.threads.runs.retrieve(
                thread_id=thread.id,
                run_id=run.id
            )
            if run_status.status == 'completed':
                break
            elif run_status.status == 'failed':
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
            time.sleep(1)

        messages = client.beta.threads.messages.list(
            thread_id=thread.id
        )
        return messages.data[0].content[0].text.value

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"

@dp.message()
async def process_message(message: Message):
    if not message.text:
        return
        
    try:
        processing_msg = await message.reply("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
        response = await get_assistant_response(message.text)
        await processing_msg.delete()
        await message.reply(response)

    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())